use mavenmovies;
select * from actor;
select * from actor_award;
select * from address;
select * from advisor;
select * from category;
select * from city;
select * from country;
select * from customer;
select * from film;
select * from film_actor;
select * from film_category;
select * from film_text;
select * from inventory;
select * from investor;
select * from language;
select * from payment;
select * from rental;
select * from staff;
select * from store;

-- ----------------------------------------2nd Assignment Solution-------------------------------------------------------------------------------------------------------------
-- Assignment Questions
-- Practice Question 
-- Basic Aggregate Functions: 
-- String Functions: 
-- GROUP BY:
-- Joins:
-- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Question 1: Retrieve the total number of rentals made in the Sakila database. 
-- Hint: Use the COUNT() function. 

select count(*) from rental;

-- Question 2: Find the average rental duration (in days) of movies rented from the Sakila database.
-- Hint: Utilize the AVG() function. 
select * from rental;
select avg(rental_date) from rental;

-- Question 3: Display the first name and last name of customers in uppercase. 
-- Hint: Use the UPPER () function. 

select UPPER(first_name) AS FirstName,
	   UPPER(last_name) AS LastName
       from customer;

-- Question 4: Extract the month from the rental date and display it alongside the rental ID. 
-- Hint: Employ the MONTH() function. 
select *  from rental;

select rental_id, MONTH(rental_date) from rental;

-- Question 5: Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
-- Hint: Use COUNT () in conjunction with GROUP BY. 
select * from rental;
select customer_id, count(rental_date) from rental
group by customer_id;

-- Question 6: Find the total revenue generated by each store. 
-- Hint: Combine SUM() and GROUP BY. 
select * from store;
select sum(store_id) as total_revenue from store;

-- Question 7:Display the title of the movie, customer s first name, and last name who rented it. 
-- Hint: Use JOIN between the film, inventory, rental, and customer tables. 

SELECT f.title AS movie_title, c.first_name, c.last_name
FROM film f
JOIN inventory i 
ON f.film_id = i.film_id
JOIN rental r 
ON i.inventory_id = r.inventory_id
JOIN customer c 
ON r.customer_id = c.customer_id;

-- -------------------------------------------------------------------------------------------------------------------------------------------------------

-- Joins:
-- Advanced Joins and GROUP BY: 
-- Question 8: Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
-- Hint: Use JOIN between the film actor, film, and actor tables.
-- select * from actor;
-- select * from film_actor;
-- select * from film;
-- select * from actor;

SELECT a.first_name, a.last_name
FROM actor a
JOIN film_actor fa
ON a.actor_id = fa.actor_id

JOIN film f
ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';
 
-- Question 1: Determine the total number of rentals for each category of movies. 
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY. 

-- select * from category;
-- select * from film_category;
-- select * from film;
-- select * from rental;
SELECT fc.category_id, COUNT(*) AS total_rentals
FROM film_category fc
JOIN film f
ON fc.film_id = f.film_id
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON i.inventory_id = r.inventory_id
GROUP BY fc.category_id;


-- Question 2: Find the average rental rate of movies in each language. 
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY. 

SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
JOIN language l
ON f.language_id = l.language_id
GROUP BY l.name;

-- Question 3: Retrieve the customer names along with the total amount they've spent on rentals. 
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY. 

SELECT c.first_name, c.last_name, SUM(p.amount) AS total_amount_spent
FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
JOIN rental r
ON c.customer_id = r.customer_id
GROUP BY c.customer_id;



-- Question 4: List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY. 

SELECT c.first_name, c.last_name, f.title AS movie_title
FROM customer c
JOIN address a ON
c.address_id = a.address_id
JOIN city ct ON
a.city_id = ct.city_id
JOIN rental r
ON c.customer_id = r.customer_id
JOIN inventory i
ON r.inventory_id = i.inventory_id
JOIN film f
ON i.film_id = f.film_id
WHERE ct.city = 'London'
GROUP BY c.customer_id, f.title;



-- Question 5: Display the top 5 rented movies along with the number of times they've been rented. 
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results. 

SELECT f.title AS movie_title, COUNT(*) AS rental_count
FROM film f
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY rental_count DESC
LIMIT 5;


-- Question 6: Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY. 

SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN rental r
ON c.customer_id = r.customer_id
JOIN inventory i
ON r.inventory_id = i.inventory_id
GROUP BY c.customer_id
HAVING COUNT(DISTINCT i.store_id) = 2;



-- -----------------------------------------------------------------THANK YOU!--------------------------------------------------------------------------------

